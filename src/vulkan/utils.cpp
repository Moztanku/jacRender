#include "vulkan/utils.hpp"

#include <iostream>
#include <format>

namespace {

auto debug_callback(
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    [[maybe_unused]] VkDebugUtilsMessageTypeFlagsEXT messageType,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData,
    [[maybe_unused]] void* pUserData
) VKAPI_CALL -> VKAPI_ATTR VkBool32 {
    constexpr std::ostream& OUT_FILE = std::cerr;

    constexpr bool COLOR_OUTPUT = true;
    const char* RESET   = COLOR_OUTPUT ? "\033[0m"      : "";
    const char* WHITE   = COLOR_OUTPUT ? "\033[0;37m"   : "";
    const char* GREEN   = COLOR_OUTPUT ? "\033[0;32m"   : "";
    const char* YELLOW  = COLOR_OUTPUT ? "\033[0;33m"   : "";
    const char* RED     = COLOR_OUTPUT ? "\033[0;31m"   : "";
    const char* FADE    = COLOR_OUTPUT ? "\033[2m"      : "";

    const char* severity_color =
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT ? WHITE :
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT ? GREEN :
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT ? YELLOW :
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT ? RED :
        WHITE;

    const char* severity =
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT ? "VERBOSE" :
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT ? "INFO" :
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT ? "WARNING" :
        messageSeverity == VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT ? "ERROR" :
        "UNKNOWN";

    OUT_FILE << std::format(
        "[{}{}{}] {} {}@ {}{}\n",
        severity_color, severity, RESET,
        pCallbackData->pMessage,
        FADE,
        pCallbackData->pMessageIdName ? pCallbackData->pMessageIdName : "N/A",
        RESET
    );

    return VK_FALSE; // Return VK_FALSE to indicate that the message should not be discarded
}

} // namespace

namespace vulkan {

[[nodiscard]]
auto to_string(const VkResult result) noexcept -> const char*
{
    const std::map<VkResult, const char*> resultStrings = {
        {VK_SUCCESS, "VK_SUCCESS"},
        {VK_NOT_READY, "VK_NOT_READY"},
        {VK_TIMEOUT, "VK_TIMEOUT"},
        {VK_EVENT_SET, "VK_EVENT_SET"},
        {VK_EVENT_RESET, "VK_EVENT_RESET"},
        {VK_INCOMPLETE, "VK_INCOMPLETE"},
        {VK_ERROR_OUT_OF_HOST_MEMORY, "VK_ERROR_OUT_OF_HOST_MEMORY"},
        {VK_ERROR_OUT_OF_DEVICE_MEMORY, "VK_ERROR_OUT_OF_DEVICE_MEMORY"},
        {VK_ERROR_INITIALIZATION_FAILED, "VK_ERROR_INITIALIZATION_FAILED"},
        {VK_ERROR_DEVICE_LOST, "VK_ERROR_DEVICE_LOST"},
        {VK_ERROR_MEMORY_MAP_FAILED, "VK_ERROR_MEMORY_MAP_FAILED"},
        {VK_ERROR_LAYER_NOT_PRESENT, "VK_ERROR_LAYER_NOT_PRESENT"},
        {VK_ERROR_EXTENSION_NOT_PRESENT, "VK_ERROR_EXTENSION_NOT_PRESENT"},
        {VK_ERROR_FEATURE_NOT_PRESENT, "VK_ERROR_FEATURE_NOT_PRESENT"},
        {VK_ERROR_INCOMPATIBLE_DRIVER, "VK_ERROR_INCOMPATIBLE_DRIVER"},
        {VK_ERROR_TOO_MANY_OBJECTS, "VK_ERROR_TOO_MANY_OBJECTS"},
        {VK_ERROR_FORMAT_NOT_SUPPORTED, "VK_ERROR_FORMAT_NOT_SUPPORTED"},
        {VK_ERROR_FRAGMENTED_POOL, "VK_ERROR_FRAGMENTED_POOL"},
        {VK_ERROR_UNKNOWN, "VK_ERROR_UNKNOWN"},
        {VK_ERROR_OUT_OF_POOL_MEMORY, "VK_ERROR_OUT_OF_POOL_MEMORY"},
        {VK_ERROR_INVALID_EXTERNAL_HANDLE, "VK_ERROR_INVALID_EXTERNAL_HANDLE"},
        {VK_ERROR_FRAGMENTATION, "VK_ERROR_FRAGMENTATION"},
        {VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"},
        {VK_PIPELINE_COMPILE_REQUIRED, "VK_PIPELINE_COMPILE_REQUIRED"},
        {VK_ERROR_NOT_PERMITTED, "VK_ERROR_NOT_PERMITTED"},
        {VK_ERROR_SURFACE_LOST_KHR, "VK_ERROR_SURFACE_LOST_KHR"},
        {VK_ERROR_NATIVE_WINDOW_IN_USE_KHR, "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"},
        {VK_SUBOPTIMAL_KHR, "VK_SUBOPTIMAL_KHR"},
        {VK_ERROR_OUT_OF_DATE_KHR, "VK_ERROR_OUT_OF_DATE_KHR"},
        {VK_ERROR_INCOMPATIBLE_DISPLAY_KHR, "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"},
        {VK_ERROR_VALIDATION_FAILED_EXT, "VK_ERROR_VALIDATION_FAILED_EXT"},
        {VK_ERROR_INVALID_SHADER_NV, "VK_ERROR_INVALID_SHADER_NV"},
        {VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR, "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR"},
        {VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR"},
        {VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR"},
        {VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR"},
        {VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"},
        {VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR, "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR"},
        {VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"},
        {VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"},
        {VK_THREAD_IDLE_KHR, "VK_THREAD_IDLE_KHR"},
        {VK_THREAD_DONE_KHR, "VK_THREAD_DONE_KHR"},
        {VK_OPERATION_DEFERRED_KHR, "VK_OPERATION_DEFERRED_KHR"},
        {VK_OPERATION_NOT_DEFERRED_KHR, "VK_OPERATION_NOT_DEFERRED_KHR"},
        {VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR, "VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR"},
        {VK_ERROR_COMPRESSION_EXHAUSTED_EXT, "VK_ERROR_COMPRESSION_EXHAUSTED_EXT"},
        {VK_INCOMPATIBLE_SHADER_BINARY_EXT, "VK_INCOMPATIBLE_SHADER_BINARY_EXT"},
        {VK_PIPELINE_BINARY_MISSING_KHR, "VK_PIPELINE_BINARY_MISSING_KHR"},
        {VK_ERROR_NOT_ENOUGH_SPACE_KHR, "VK_ERROR_NOT_ENOUGH_SPACE_KHR"},
        {VK_ERROR_OUT_OF_POOL_MEMORY_KHR, "VK_ERROR_OUT_OF_POOL_MEMORY_KHR"},
        {VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR, "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR"},
        {VK_ERROR_FRAGMENTATION_EXT, "VK_ERROR_FRAGMENTATION_EXT"},
        {VK_ERROR_NOT_PERMITTED_EXT, "VK_ERROR_NOT_PERMITTED_EXT"},
        {VK_ERROR_NOT_PERMITTED_KHR, "VK_ERROR_NOT_PERMITTED_KHR"},
        {VK_ERROR_INVALID_DEVICE_ADDRESS_EXT, "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT"},
        {VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR, "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"},
        {VK_PIPELINE_COMPILE_REQUIRED_EXT, "VK_PIPELINE_COMPILE_REQUIRED_EXT"},
        {VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT, "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT"},
        {VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT, "VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT"},
        {VK_RESULT_MAX_ENUM, "VK_RESULT_MAX_ENUM"}
    };

    const auto it = resultStrings.find(result);

    if (it != resultStrings.end()) {
        return it->second;
    } else {
        return "UNKNOWN_VK_RESULT";
    }
}

[[nodiscard]]
auto get_debug_messenger_create_info() noexcept -> VkDebugUtilsMessengerCreateInfoEXT
{
    VkDebugUtilsMessengerCreateInfoEXT createInfo{};

    createInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    createInfo.pNext = nullptr;

    createInfo.flags = 0;
    createInfo.messageSeverity =
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT |
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT |
        VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
    createInfo.messageType =
        VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |
        VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT |
        VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
    createInfo.pfnUserCallback = debug_callback;
    createInfo.pUserData = nullptr;

    return createInfo;
}

[[nodiscard]]
auto get_default_validation_layers() noexcept -> std::vector<const char*> {
    if (!common::DEBUG) {
        return {};
    }

    return {
        "VK_LAYER_KHRONOS_validation"
    };
}

} // namespace vulkan
